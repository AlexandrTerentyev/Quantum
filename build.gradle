group 'QuantumEmulator'
version '1.0'

apply plugin: 'java'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}


sourceSets {
    main.java.srcDirs += 'kpfu.terentyev.quantum'
}

jar{
    manifest {
        attributes 'Main-Class': 'kpfu.terentyev.quantum.TestClass'
    }
}

task jarForMac(type: Jar){
    System.setProperty('jcuda.os', 'apple')
    System.setProperty('jcuda.arch', 'x86_64')
    baseName = project.name + '-Mac'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task jarForWindows(type: Jar){
    System.setProperty('jcuda.os', 'window')
    System.setProperty('jcuda.arch', 'x86_64')
    baseName = project.name + '-Win'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task jarForLinuxX86_64(type: Jar){
    System.setProperty('jcuda.os', 'linux')
    System.setProperty('jcuda.arch', 'x86_64')
    baseName = project.name + '-LinuxX86_64'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


def osString(){
    return  System.getProperty('jcuda.os')
}

def archString(){
    return  System.getProperty('jcuda.arch')
}

repositories {
    mavenCentral()
}



dependencies {
    def classifier = osString()+'-'+archString()

    compile group: 'org.jcuda', name: 'jcuda-natives', classifier: classifier, version: '0.8.0'
    compile group: 'org.jcuda', name: 'jcublas-natives', classifier: classifier, version: '0.8.0'

    compile (group: 'org.jcuda', name: 'jcuda', version: '0.8.0',){
        transitive=false
    }
    compile (group: 'org.jcuda', name: 'jcublas', version: '0.8.0'){
        transitive=false
    }
}
